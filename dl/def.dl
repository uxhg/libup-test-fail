.type Call <: symbol
.type Class <: symbol
.type Version <: symbol
.type MvnGroup <: symbol
.type MvnArtifact <: symbol
.type Resolution <: symbol


/* From dpfact */
.decl DataFlowVMethod(srcm: Call, srcc: Class, dstm: Call, dstc: Class)
.input DataFlowVMethod(file="DataFlowVMethod.facts")

/* From clsfact */
.decl ContainClass(g: MvnGroup, a: MvnArtifact, v: Version, c: Class)
.input ContainClass(file="ContainClass.facts")

/* From CSlicer */
.decl ClsReference(src: Class, dst: Class)
.input ClsReference(file="Reference.facts")

/* From pomfact */
.decl PomDep(srcg: MvnGroup, srca: MvnArtifact, srcv: Version,
        dstg: MvnGroup, dsta: MvnArtifact, dstv: Version, r: Resolution)
.input PomDep(file="PomDep.facts")


.decl FindL(a: Class, b: Class, gx: MvnGroup, ax: MvnArtifact, gy: MvnGroup, ay: MvnArtifact, srcm: Call, dstm: Call)
.decl FindR(a: Class, b: Class, gx, MvnGroup, ax: MvnArtifact, gy: MvnGroup, ay: MvnArtifact, srcm: Call, dstm: Call)
.decl FindLlib(j: MvnArtifact, k: MvnArtifact)
.decl FindRlib(j: MvnArtifact, k: MvnArtifact)
/* Find dataflow exist in methods which their jars are also declared depended in POM */
PomDep(xg, xa, xv, zg, za, zv, r) :- PomDep(xg, xa, xv, yg, ya, yv, r), PomDep(yg, ya, yv, zg, za, zv, r).
FindL(a, b, gx, ax, gy, ay, srcm, dstm):- ContainClass(gx, ax, _, a), ContainClass(gy, ay, _, b), PomDep(gx, ax, _, gy, ay, _, _), DataFlowVMethod(srcm, a, dstm, b).
FindR(a, b, gx, ax, gy, ay, srcm, dstm):- ContainClass(gx, ax, _, a), ContainClass(gy, ay, _, b), PomDep(gx, ax, _, gy, ay, _, _), DataFlowVMethod(srcm, b, dstm, a).
FindLlib(j, k) :- FindL(_, _, j, k, _, _).
FindRlib(j, k) :- FindR(_, _, j, k, _, _).

.output FindL
.output FindR

.output FindLlib
.output FindRlib

.decl SameGroupDataFlowL(shared: MvnGroup, xa: MvnArtifact, xclass: Class, xcall: Call, ya: MvnArtifact, yclass: Class, ycall: Call)
.decl SameGroupDataFlowR(shared: MvnGroup, xa: MvnArtifact, xclass: Class, xcall: Call, ya: MvnArtifact, yclass: Class, ycall: Call)
SameGroupDataFlowL(shared, xa, xclass, xcall, ya, yclass, ycall) :-
	ContainClass(shared, xa, xver, xclass),
	ContainClass(shared, ya, yver, yclass),
	DataFlowVMethod(xcall, xclass, ycall, yclass).
SameGroupDataFlowR(shared, xa, xclass, xcall, ya, yclass, ycall) :-
	ContainClass(shared, xa, xver, xclass),
	ContainClass(shared, ya, yver, yclass),
	DataFlowVMethod(ycall, yclass, xcall, xclass).

.output SameGroupDataFlowL
.output SameGroupDataFlowR
