#+TITLE: Inspect Upgrading Bugs
#+DATE:
#+AUTHOR: wuxh
#+OPTIONS: timestamp:nil
#+OPTIONS: ^:{}
#+HTML_HEAD_EXTRA: <style type="text/css">body{font-family:"Iowan Old Style","Palatino","Linux Libertine","Georgia", serif;} code, kbd, pre, samp {font-family: Monaco, Consolas, "Cascadia Code", "Fira Mono", "Fira Code", monospace}</style>


** WAIT Cases specifying versions using references
Could =${lib.version}= in one dependency be upgraded alone in common practice?
#+begin_src xml
client: servicecomb-pack, lib: io.grpc:grpc-protobuf, old version: 1.14.0, new version: 1.26.0, type: Error Only

CO_EVOLVE_PROBLEM

UPGRADE_TOGETHER_NOT_FAIL

      <dependency>
        <groupId>io.grpc</groupId>
        <artifactId>grpc-netty</artifactId>
        <version>${grpc.version}</version>
      </dependency>
      <dependency>
        <groupId>io.grpc</groupId>
        <artifactId>grpc-stub</artifactId>
        <version>${grpc.version}</version>
      </dependency>
      <dependency>
        <groupId>io.grpc</groupId>
        <artifactId>grpc-testing</artifactId>
        <version>${grpc.version}</version>
      </dependency>
#+end_src


** WAIT openscoring-guava
   + hardcoded version strings in two related libraries.
   + transitive: root cause in another library
*** POM
#+begin_src xml
client: openscoring, lib: com.google.guava:guava, old version: 27.0-jre, new version: 28.2-jre, type: Error Only

CO_EVOLVE_PROBLEM, CANNOT USE?

    <dependency>
	    <groupId>com.google.guava</groupId>
	    <artifactId>guava</artifactId>
	    <version>28.2-jre</version>
    </dependency>
    <dependency>
	    <groupId>com.google.guava</groupId>
	    <artifactId>guava-gwt</artifactId>
	    <version>27.0-jre</version>
    </dependency>
#+end_src

*** Test run results
#+begin_src
Tests run: 3, Failures: 0, Errors: 3, Skipped: 0, Time elapsed: 2.706 s <<< FAILURE! - in org.openscoring.service.ModelResourceTest
#+end_src

*** First one: NoClassDefFoundError / ClassNotFoundException
#+begin_src java
linearRegressionAuto(org.openscoring.service.ModelResourceTest)  Time elapsed: 2.003 s  <<< ERROR!
javax.ws.rs.ProcessingException: Server-side request processing failed with an error.
	at org.openscoring.service.ModelResourceTest.deploy(ModelResourceTest.java:277)
	at org.openscoring.service.ModelResourceTest.linearRegressionAuto(ModelResourceTest.java:209)
Caused by: java.lang.NoClassDefFoundError: com/google/common/util/concurrent/internal/InternalFutureFailureAccess
	at org.openscoring.service.ModelResourceTest.deploy(ModelResourceTest.java:277)
	at org.openscoring.service.ModelResourceTest.linearRegressionAuto(ModelResourceTest.java:209)
Caused by: java.lang.ClassNotFoundException: com.google.common.util.concurrent.internal.InternalFutureFailureAccess
	at org.openscoring.service.ModelResourceTest.deploy(ModelResourceTest.java:277)
	at org.openscoring.service.ModelResourceTest.linearRegressionAuto(ModelResourceTest.java:209)
#+end_src

#+begin_src java
private ModelResponse deploy(String id) throws IOException {
	Response response;

	try(InputStream is = openPMML(id)){
		Entity<InputStream> entity = Entity.entity(is, MediaType.APPLICATION_XML);

		response = target("model/" + id).request(MediaType.APPLICATION_JSON).put(entity);
	}

	assertEquals(201, response.getStatus());
	assertNotNull(response.getHeaderString(Headers.SERVICE));

	return response.readEntity(ModelResponse.class);
}
#+end_src

#+begin_src java
// org.glassfish.jersey.client.JerseyWebTarget;
public Builder request(String... acceptedResponseTypes) {
	this.checkNotClosed();
	Builder b = new Builder(this.getUri(), this.config.snapshot());
	b.request().accept(acceptedResponseTypes);
	return b;
}
#+end_src
failure
https://github.com/jersey/jersey/blob/master/test-framework/providers/inmemory/src/main/java/org/glassfish/jersey/test/inmemory/InMemoryConnector.java


*** Differences in pom.xml

#+begin_src xml
<!-- guava 27.0 pom.xml -->
<configuration>
	<instructions>
	<Export-Package>!com.google.common.base.internal,com.google.common.*</Export-Package>
	<Import-Package>
		javax.annotation;resolution:=optional,
		javax.crypto.*;resolution:=optional,
		sun.misc.*;resolution:=optional
	</Import-Package>
	<Bundle-DocURL>https://github.com/google/guava/</Bundle-DocURL>
	</instructions>
</configuration>
#+end_src

#+begin_src xml
<!-- guava 28.2 pom.xml -->
<configuration>
	<instructions>
	<Export-Package>
		!com.google.common.base.internal,
		!com.google.common.util.concurrent.internal,
		com.google.common.*
	</Export-Package>
	<Import-Package>
		com.google.common.util.concurrent.internal,
		javax.annotation;resolution:=optional,
		javax.crypto.*;resolution:=optional,
		sun.misc.*;resolution:=optional
	</Import-Package>
	<Bundle-DocURL>https://github.com/google/guava/</Bundle-DocURL>
	</instructions>
</configuration>
#+end_src


*** Call to error
#+begin_src java
private ModelResponse deploy(String id) throws IOException {
	Response response;

	try(InputStream is = openPMML(id)){
		Entity<InputStream> entity = Entity.entity(is, MediaType.APPLICATION_XML);

		response = target("model/" + id).request(MediaType.APPLICATION_JSON).put(entity);
	}

	assertEquals(201, response.getStatus());
	assertNotNull(response.getHeaderString(Headers.SERVICE));

	return response.readEntity(ModelResponse.class);
}
#+end_src

#+begin_src java
// org.glassfish.jersey.client.JerseyWebTarget;
public Builder request(String... acceptedResponseTypes) {
	this.checkNotClosed();
	Builder b = new Builder(this.getUri(), this.config.snapshot());
	b.request().accept(acceptedResponseTypes);
	return b;
}
#+end_src

Error message was generated by:
https://github.com/jersey/jersey/blob/master/test-framework/providers/inmemory/src/main/java/org/glassfish/jersey/test/inmemory/InMemoryConnector.java


** TODO logback, log4j, sel4j and commons-logging

    [[http://logback.qos.ch/][logback]]
    https://github.com/gatling/gatling/issues/3290
    https://github.com/gatling/gatling/issues/3291


** DONE openscoring > jersey.core:jersey-client
   Conclusion: caused by version conflicts in transitive dependencies.
*** Reproduce
   =mvn compile= succeeds, =mvn test-compile= succeeds.
   =mvn test= triggers =NoClassDefFoundError=.
#+begin_src sh
[ERROR] Tests run: 5, Failures: 0, Errors: 3, Skipped: 0
[ERROR]   ModelResourceTest.associationRulesShopping:164->deployForm:296->JerseyTest.target:579->JerseyTest.target:565 » NoClassDefFound
[ERROR]   ModelResourceTest.decisionTreeIris:86->queryBatch:312->JerseyTest.target:579->JerseyTest.target:565 » NoClassDefFound
[ERROR]   ModelResourceTest.linearRegressionAuto:209->deploy:277->JerseyTest.target:579->JerseyTest.target:565 » NoClassDefFound
#+end_src

*** Fix
    :PROPERTIES:
    :VISIBILITY: folded
    :END:
    Update all =org.glassfish.jersey*= dependencies of =openscoring= from 2.27 to 2.29.1 would fix
    the issue.
#+begin_src diff
diff --git a/pom.xml b/pom.xml
index f5e9e71..49b92f4 100644
--- a/pom.xml
+++ b/pom.xml
@@ -168,22 +168,22 @@
                        <dependency>
                                <groupId>org.glassfish.jersey.containers</groupId>
                                <artifactId>jersey-container-servlet</artifactId>
-                               <version>2.27</version>
+                               <version>2.29.1</version>
                        </dependency>
                        <dependency>
                                <groupId>org.glassfish.jersey.core</groupId>
                                <artifactId>jersey-client</artifactId>
-                               <version>2.27</version>
+                               <version>2.29.1</version>
                        </dependency>
                        <dependency>
                                <groupId>org.glassfish.jersey.core</groupId>
                                <artifactId>jersey-server</artifactId>
-                               <version>2.27</version>
+                               <version>2.29.1</version>
                        </dependency>
                        <dependency>
                                <groupId>org.glassfish.jersey.inject</groupId>
                                <artifactId>jersey-hk2</artifactId>
-                               <version>2.27</version>
+                               <version>2.29.1</version>
                                <exclusions>
                                        <exclusion>
                                                <groupId>javax.inject</groupId>
@@ -194,12 +194,12 @@
                        <dependency>
                                <groupId>org.glassfish.jersey.media</groupId>
                                <artifactId>jersey-media-json-jackson</artifactId>
-                               <version>2.27</version>
+                               <version>2.29.1</version>
                        </dependency>
                        <dependency>
                                <groupId>org.glassfish.jersey.media</groupId>
                                <artifactId>jersey-media-multipart</artifactId>
-                               <version>2.27</version>
+                               <version>2.29.1</version>
                        </dependency>

                        <dependency>
@@ -267,13 +267,13 @@
                        <dependency>
                                <groupId>org.glassfish.jersey.test-framework</groupId>
                                <artifactId>jersey-test-framework-core</artifactId>
-                               <version>2.27</version>
+                               <version>2.29.1</version>
                                <scope>test</scope>
                        </dependency>
                        <dependency>
                                <groupId>org.glassfish.jersey.test-framework.providers</groupId>
                                <artifactId>jersey-test-framework-provider-inmemory</artifactId>
-                               <version>2.27</version>
+                               <version>2.29.1</version>
                                <scope>test</scope>
                        </dependency>
                </dependencies>
#+end_src

*** linearRegressionAuto
#+begin_src sh
[ERROR] linearRegressionAuto(org.openscoring.service.ModelResourceTest)  Time elapsed: 1.215 s  <<< ERROR!
java.lang.NoClassDefFoundError: org/glassfish/jersey/internal/l10n/LocalizableMessageFactory$ResourceBundleSupplier
        at org.glassfish.jersey.client.JerseyClient.checkNotClosed(JerseyClient.java:257)
        at org.glassfish.jersey.client.JerseyClient.target(JerseyClient.java:279)
        at org.glassfish.jersey.client.JerseyClient.target(JerseyClient.java:56)
        at org.glassfish.jersey.test.JerseyTest.target(JerseyTest.java:565)
        at org.glassfish.jersey.test.JerseyTest.target(JerseyTest.java:579)
        at org.openscoring.service.ModelResourceTest.deploy(ModelResourceTest.java:277)
        at org.openscoring.service.ModelResourceTest.linearRegressionAuto(ModelResourceTest.java:209)
#+end_src

=ResourceBundleSupplier= does not exist in source code of version 2.27, but in version 2.29 of
=jersey-client=:
#+begin_src java
org/glassfish/jersey/client/internal/LocalizationMessages.java
8:import org.glassfish.jersey.internal.l10n.LocalizableMessageFactory.ResourceBundleSupplier;
670-    private static class BundleSupplier
671:        implements ResourceBundleSupplier

org/glassfish/jersey/client/internal/jdkconnector/LocalizationMessages.java
8:import org.glassfish.jersey.internal.l10n.LocalizableMessageFactory.ResourceBundleSupplier;
694-    private static class BundleSupplier
695:        implements ResourceBundleSupplier
#+end_src

And there is =LocalizableMessageFactory$ResourceBundleSupplier= defined in =jersey-common= (2.29.1
but not 2.27).
And =openscoring= depends on =jersey-client= and =jersey-server=, both of which depend on =jersey-common=.

In both =jersey-client= and =jersey-server=, versions of =jersey-common= are indicated using references.
#+begin_src xml
<dependency>
    <groupId>org.glassfish.jersey.core</groupId>
    <artifactId>jersey-common</artifactId>
    <version>${project.version}</version>
</dependency>
#+end_src

Note that even we change version of =jersey-server= to 2.29.1 for =openscoring=, there are new
=NoClassDefFoundError= errors, see [[*openscoring > jersey.core:jersey-server]].


** WAIT openscoring > jersey.core:jersey-server
*** Error
#+begin_src sh
[ERROR] Tests run: 3, Failures: 0, Errors: 3, Skipped: 0, Time elapsed: 0.701 s <<< FAILURE! - in org.openscoring.service.ModelResourceTest
[ERROR] linearRegressionAuto(org.openscoring.service.ModelResourceTest)  Time elapsed: 0.376 s  <<< ERROR!
java.lang.NoClassDefFoundError: org/glassfish/jersey/server/model/Parameter$Source
Caused by: java.lang.ClassNotFoundException: org.glassfish.jersey.server.model.Parameter$Source

[ERROR] associationRulesShopping(org.openscoring.service.ModelResourceTest)  Time elapsed: 0.027 s  <<< ERROR!
java.lang.NoClassDefFoundError: org/glassfish/jersey/server/model/Parameter$Source

[ERROR] decisionTreeIris(org.openscoring.service.ModelResourceTest)  Time elapsed: 0.026 s  <<< ERROR!
java.lang.NoClassDefFoundError: org/glassfish/jersey/server/model/Parameter$Source
#+end_src

*** Stacktrace
    :PROPERTIES:
    :VISIBILITY: folded
    :END:
#+begin_src java
[ERROR] linearRegressionAuto(org.openscoring.service.ModelResourceTest)  Time elapsed: 0.331 s  <<< ERROR!
java.lang.NoClassDefFoundError: org/glassfish/jersey/server/model/Parameter$Source
        at org.glassfish.jersey.media.multipart.internal.FormDataParamValueParamProvider.<init>(FormDataParamValueParamProvider.java:371)
        at org.glassfish.jersey.media.multipart.internal.FormDataParamInjectionFeature$1.configure(FormDataParamInjectionFeature.java:76)
        at org.glassfish.jersey.internal.inject.AbstractBinder.invokeConfigure(AbstractBinder.java:256)
        at org.glassfish.jersey.internal.inject.AbstractBinder.getBindings(AbstractBinder.java:246)
        at org.glassfish.jersey.internal.inject.Bindings.getBindings(Bindings.java:44)
        at org.glassfish.jersey.internal.inject.AbstractBinder.lambda$getBindings$1(AbstractBinder.java:248)
        at java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:269)
        at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1384)
        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)
        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)
        at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)
        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
        at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:566)
        at org.glassfish.jersey.internal.inject.AbstractBinder.getBindings(AbstractBinder.java:249)
        at org.glassfish.jersey.internal.inject.Bindings.getBindings(Bindings.java:44)
        at org.glassfish.jersey.inject.hk2.Hk2Helper.bind(Hk2Helper.java:90)
        at org.glassfish.jersey.inject.hk2.ImmediateHk2InjectionManager.register(ImmediateHk2InjectionManager.java:82)
        at org.glassfish.jersey.internal.inject.JerseyBinderConfigurationFactory$JerseyBinderConfiguration.configureBinders(JerseyBinderConfigurationFactory.
java:62)
        at org.glassfish.jersey.internal.inject.JerseyBinderConfigurationFactory$JerseyBinderConfiguration.configureBinders(JerseyBinderConfigurationFactory.
java:52)
        at org.glassfish.jersey.model.internal.CommonConfig$BinderConfigurations.configureBinders(CommonConfig.java:130)
        at org.glassfish.jersey.model.internal.CommonConfig$BinderConfigurations.access$300(CommonConfig.java:104)
        at org.glassfish.jersey.model.internal.CommonConfig.configureMetaProviders(CommonConfig.java:665)
        at org.glassfish.jersey.server.ResourceConfig.configureMetaProviders(ResourceConfig.java:802)
        at org.glassfish.jersey.server.ApplicationHandler.initialize(ApplicationHandler.java:328)
        at org.glassfish.jersey.server.ApplicationHandler.lambda$initialize$1(ApplicationHandler.java:293)
        at org.glassfish.jersey.internal.Errors.process(Errors.java:292)
        at org.glassfish.jersey.internal.Errors.process(Errors.java:274)
	at org.glassfish.jersey.internal.Errors.processWithException(Errors.java:232)
        at org.glassfish.jersey.server.ApplicationHandler.initialize(ApplicationHandler.java:292)
        at org.glassfish.jersey.server.ApplicationHandler.<init>(ApplicationHandler.java:259)
        at org.glassfish.jersey.server.ApplicationHandler.<init>(ApplicationHandler.java:234)
        at org.glassfish.jersey.test.inmemory.InMemoryTestContainerFactory$InMemoryTestContainer.<init>(InMemoryTestContainerFactory.java:78)
        at org.glassfish.jersey.test.inmemory.InMemoryTestContainerFactory$InMemoryTestContainer.<init>(InMemoryTestContainerFactory.java:64)
        at org.glassfish.jersey.test.inmemory.InMemoryTestContainerFactory.create(InMemoryTestContainerFactory.java:112)
        at org.glassfish.jersey.test.JerseyTest.createTestContainer(JerseyTest.java:278)
        at org.glassfish.jersey.test.JerseyTest.setUp(JerseyTest.java:608)
	...
#+end_src

** CANCELED querydsl > org.hsqldb.hsqldb
   - State "CANCELED"   from "TODO"       [2020-12-18 Fri 14:43]
   client: querydsl, lib: org.hsqldb:hsqldb, old version: 2.3.2, new version: 2.5.0, type: Fail + Error
*** Status [2/5]
	+ [X] Succeed with old versions
	+ [X] Failed after upgrading
	+ [-] HsqldbLiteralsSuiteTest$Select>SelectBase.yearWeek:2076 [1/2]
	  - [X] Stacktrace analyzed
	  - [ ] Root cause revealed
	+ [ ] HsqldbSuiteTest$Select>SelectBase.math2:1182->SelectBase.math:1202
	+ [ ] HsqldbSuiteTest$Select>SelectBase.yearWeek:2076
*** Failures and Errors
   #+begin_src sh
Tests run: 3312, Failures: 3, Errors: 1, Skipped: 61

Failed tests:
  HsqldbLiteralsSuiteTest$Select>SelectBase.yearWeek:2076 expected:<200006> but was:<200007>
  HsqldbSuiteTest$Select>SelectBase.math2:1182->SelectBase.math:1202 expected:<0.25> but was:<0.0>
  HsqldbSuiteTest$Select>SelectBase.yearWeek:2076 expected:<200006> but was:<200007>
Tests in error:
  HsqldbSuiteTest$Select>SelectBase.math:1176->SelectBase.math:1195->SelectBase.firstResult:65 » Query
   #+end_src

*** yearWeek()
  Test: =com.querydsl.sql.suites.HsqldbLiteralsSuiteTest$Select=
  Call method in test: =com.querydsl.sql.SelectBase.yearWeek:2076=
  Failure: expected <200006>, but was <200007>

  The failed test:
  #+begin_src java
public void yearWeek() {
	SQLQuery<?> query = query().from(employee).orderBy(employee.id.asc());
	assertEquals(Integer.valueOf(200006), query.select(employee.datefield.yearWeek()).fetchFirst());
}
  #+end_src

  The actual query:
  #+begin_src sql
select extract(year from e.DATEFIELD) * 100 + extract(week_of_year from e.DATEFIELD) from EMPLOYEE e order by e.ID asc limit 1
  #+end_src

  And the date is 2000-02-10, which is ISO week 6 (2000/02/07--2000/02/13).
  But the =extract (week_of_year)= seems related to =java.util.Calendar= which would return
  different results according to =Locale=.

  E.g. =LC_ALL=de_DE mvn test -Dtest=com.querydsl.sql.suites.HsqldbLiteralsSuiteTest= will not fail.

  Note that setting =LC_ALL= is different from using fields from =java.util.Locale=, the command
  above is just for showing that locale can affect the result.

  #+begin_src diff
diff --color -r hsqldb-232/org/hsqldb/HsqlDateTime.java hsqldb-250/org/hsqldb/HsqlDateTime.java
68,75c68,70
<     /**
<      * A reusable static value for today's date. Should only be accessed
<      * by getToday()
<      */
<     private static Locale        defaultLocale = Locale.UK;
<     private static long          currentDateMillis;
<     public static final Calendar tempCalDefault = new GregorianCalendar();
<     public static final Calendar tempCalGMT =
---
>     public static final Locale    defaultLocale  = Locale.UK;
  #+end_src
  We can verify that =Locale.UK= should not give week *6*.
  And =defaultLocale= in =hsqldb=, no matther which version, is =Locale.UK=.

** DONE enunciate > swagger-annotations
   client: enunciate, lib: io.swagger:swagger-annotations,
   old version: 1.5.22, new version: 2.0.0-rc2, type: Error Only
*** Status [3/3]
	+ [X] Succeed with old versions
	+ [X] Failed after upgrading
	  - [X] Compilation Error: package =io.swagger.annotations= does not exist
	+ [X] Complex issues from big changes in =swagger-annotations=.

**** Upgrade leading to compilation error
	 Following configuration only appears in =pom.xml= of old version library.
	 (in =M2_REPO/io/swagger/swagger-annotations/1.5.22/swagger-annotations-1.5.22.pom=)

	 #+begin_src sh
[ERROR] jaxrs/src/main/java/com/webcohesion/enunciate/modules/jaxrs/model/ResourceMethod.java:[41,1]
  package io.swagger.annotations does not exist
	 #+end_src

	 #+begin_src xml
<plugin>
	<groupId>org.apache.felix</groupId>
	<artifactId>maven-bundle-plugin</artifactId>
	<version>${felix-version}</version>
	<extensions>true</extensions>
	<configuration>
		<instructions>
			<Export-Package>io.swagger.annotations</Export-Package>
		</instructions>
	</configuration>
</plugin>
	 #+end_src
	 Change some import of =io.swagger.annotations.*= to =io.swagger.oas.annotations.*= can solve
	 some issues. But there is a missing =io.swagger.annotation.ApiOperation= and some symbols not
	 found.

** DONE enunciate > commons-collections
   - State "DONE"       from "TODO"       [2020-12-18 Fri 14:43]
*** Info:
   + client: enunciate, lib: commons-collections:commons-collections
   + old version: 3.2.2, new version: 20040616, type: Error Only
   + LIB_ASSUME_ANOTHER_LIB

   Conclusion:
   + Runtime Error type: NoSuchMethodError
   + Cause: different version in transitive dependency, and actually it is a library downgrade
	 * =mvn versions:display-dependency-updates= incorrectly reports =20040616= as a version newer
       than =3.2.2=.
*** Status [4/4]
	+ [X] Succeed with old versions
	+ [X] Failed after upgrading
	+ [X] Stacktrace analyzed
	+ [X] Root cause revealed

*** Stacktrace
#+begin_src sh
[ERROR] testAgainstFullAPI(com.webcohesion.enunciate.modules.idl.TestEnunciateIDLModule)
Time elapsed: 0.052 s  <<< ERROR!
java.lang.NoSuchMethodError: org.apache.commons.collections.CollectionUtils.isEmpty(Ljava/util/Collection;)Z
        at org.apache.commons.configuration.XMLConfiguration.constructHierarchy(XMLConfiguration.java:640)
	at org.apache.commons.configuration.XMLConfiguration.initProperties(XMLConfiguration.java:596)
	at org.apache.commons.configuration.XMLConfiguration.load(XMLConfiguration.java:1009)
	at org.apache.commons.configuration.XMLConfiguration.load(XMLConfiguration.java:987)
	at com.webcohesion.enunciate.Enunciate.loadConfiguration(Enunciate.java:219)
	at com.webcohesion.enunciate.Enunciate.loadConfiguration(Enunciate.java:214)
	at com.webcohesion.enunciate.modules.idl.TestEnunciateIDLModule.testAgainstFullAPI(TestEnunciateIDLModule.java:79)
#+end_src

*** Causes
	enunciate (client) --> commons-configuration --> commons.collections.CollectionUtils
	#+begin_src xml
<commons-configuration.version>1.10</commons-configuration.version>
	#+end_src

	=20040616= seems to be an old version instead of one newer than =3.2.2=.
	See [[https://mvnrepository.com/artifact/commons-collections/commons-collections/20040616][mvnrepository:commons-collection]], =20040616= was released on Nov 08, 2005.
	3.2.2 was released on Nov 12, 2015.

	Method =isEmpty()= did not exist in the old version.  It causes runtime errors instead of
	compilation error because =commons-configuration= was compiled with a newer version of
	=CollectionUtils=.
** TODO enunciate > jackson-databind
*** Info
   | Client    | Library                                     | V_{old} | V_{new} | Type       |
   |-----------+---------------------------------------------+---------+---------+------------|
   | enunciate | com.fasterxml.jackson.core:jackson-databind | 2.9.9.2 |  2.10.1 | Error only |
   *Conclusion*: Exception in library methods

*** Status [2/2]
	+ [X] Succeed with old versions
	+ [X] Failed after upgrading
*** Errors
	#+begin_src
[INFO] Running com.webcohesion.enunciate.modules.java_json_client.TestGeneratedJsonTypeSerialization
[ERROR] Errors:
[ERROR]   TestGeneratedJsonTypeSerialization.testBasicShapes:66 » NoClassDefFound com/fa...
[ERROR]   TestGeneratedJsonTypeSerialization.testBus:227 » NoSuchMethod com.fasterxml.ja...
[ERROR]   TestGeneratedJsonTypeSerialization.testCanvas:662 » NoSuchMethod com.fasterxml...
[ERROR]   TestGeneratedJsonTypeSerialization.testCat:547 » NoSuchMethod com.fasterxml.ja...
[ERROR]   TestGeneratedJsonTypeSerialization.testHouse:358 » NoSuchMethod com.fasterxml....
[ERROR] Tests run: 5, Failures: 0, Errors: 5, Skipped: 0
	#+end_src

*** Details
#+begin_src java
[ERROR] testBasicShapes(com.webcohesion.enunciate.modules.java_json_client.TestGeneratedJsonTypeSerialization)  Time elapsed: 0.157 s  <<< ERROR!
java.lang.NoClassDefFoundError: com/fasterxml/jackson/core/exc/InputCoercionException
	at com.fasterxml.jackson.databind.deser.std.JdkDeserializers.<clinit>(JdkDeserializers.java:26)
	at com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findDefaultDeserializer(BasicDeserializerFactory.java:1852)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.findStdDeserializer(BeanDeserializerFactory.java:167)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(BeanDeserializerFactory.java:131)
	at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer2(DeserializerCache.java:411)
	at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer(DeserializerCache.java:349)
	at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:264)
	at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244)
	at com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(DeserializerCache.java:142)
	at com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer(DeserializationContext.java:476)
	at com.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer(ObjectMapper.java:4389)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4198)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3242)
	at com.webcohesion.enunciate.modules.java_json_client.TestGeneratedJsonTypeSerialization.testBasicShapes(TestGeneratedJsonTypeSerialization.java:66)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:252)
	at junit.framework.TestSuite.run(TestSuite.java:247)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.lang.ClassNotFoundException: com.fasterxml.jackson.core.exc.InputCoercionException
	at java.net.URLClassLoader.findClass(URLClassLoader.java:382)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	... 35 more
#+end_src

#+begin_src java
[ERROR] testBus(com.webcohesion.enunciate.modules.java_json_client.TestGeneratedJsonTypeSerialization)  Time elapsed: 0.015 s  <<< ERROR!
java.lang.NoSuchMethodError: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(Ljava/lang/Object;I)V
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:78)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:18)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)
	at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:4094)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValue(ObjectMapper.java:3360)
	at com.webcohesion.enunciate.modules.java_json_client.TestGeneratedJsonTypeSerialization.testBus(TestGeneratedJsonTypeSerialization.java:227)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:252)
	at junit.framework.TestSuite.run(TestSuite.java:247)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
#+end_src

#+begin_src java
[ERROR] testCat(com.webcohesion.enunciate.modules.java_json_client.TestGeneratedJsonTypeSerialization)  Time elapsed: 0.006 s  <<< ERROR!
java.lang.NoSuchMethodError: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(Ljava/lang/Object;I)V
	at com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer.serialize(ObjectArraySerializer.java:212)
	at com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer.serialize(ObjectArraySerializer.java:22)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)
	at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:4094)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValue(ObjectMapper.java:3360)
	at com.webcohesion.enunciate.modules.java_json_client.TestGeneratedJsonTypeSerialization.testCat(TestGeneratedJsonTypeSerialization.java:547)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:252)
	at junit.framework.TestSuite.run(TestSuite.java:247)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
#+end_src

#+begin_src java
[ERROR] testHouse(com.webcohesion.enunciate.modules.java_json_client.TestGeneratedJsonTypeSerialization)  Time elapsed: 0.035 s  <<< ERROR!
java.lang.NoSuchMethodError: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(Ljava/lang/Object;I)V
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:78)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serialize(IndexedListSerializer.java:18)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)
	at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:4094)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValue(ObjectMapper.java:3360)
	at com.webcohesion.enunciate.modules.java_json_client.TestGeneratedJsonTypeSerialization.testHouse(TestGeneratedJsonTypeSerialization.java:358)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:252)
	at junit.framework.TestSuite.run(TestSuite.java:247)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
#+end_src

#+begin_src java
[ERROR] testCanvas(com.webcohesion.enunciate.modules.java_json_client.TestGeneratedJsonTypeSerialization)  Time elapsed: 0.012 s  <<< ERROR!
java.lang.NoSuchMethodError: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(Ljava/lang/Object;I)V
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:106)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)
	at com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:4094)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValue(ObjectMapper.java:3360)
	at com.webcohesion.enunciate.modules.java_json_client.TestGeneratedJsonTypeSerialization.testCanvas(TestGeneratedJsonTypeSerialization.java:662)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:252)
	at junit.framework.TestSuite.run(TestSuite.java:247)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
#+end_src
** TODO docker-java > logback-core
*** Info
   | Client      | Library                     | V_{old} | V_{new}      | Type       |
   |-------------+-----------------------------+---------+--------------+------------|
   | docker-java | ch.qos.logback:logback-core |   1.2.3 | 1.3.0-alpha5 | Error only |

*** Status [2/2]
	+ [X] Succeed with old versions
	+ [X] Failed after upgrading
	  - [X] Upgrade both dependencies to new version (1.3.0-alpha5): not fail
	  - [X] Upgrade =logback-core= only: fail, root cause revealed

*** POM
    + Two dependencies using the same reference
    + Scope is test
   #+begin_src xml
<!-- /// Test /////////////////////////// -->
<dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-core</artifactId>
        <version>${logback.version}</version>
        <scope>test</scope>
</dependency>

<dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>${logback.version}</version>
        <scope>test</scope>
</dependency>
   #+end_src

   + also depends on =slf4j-api= and =jcl-over-sfl4j=.
   #+begin_src
--- maven-dependency-plugin:2.8:tree (default-cli) @ docker-java ---
com.github.docker-java:docker-java:bundle:3.1.5
+- org.slf4j:slf4j-api:jar:1.7.25:compile
\- org.slf4j:jcl-over-slf4j:jar:1.7.25:compile
   #+end_src
   In the same time, =logback-classic= depends on  =logback-core=, =slf4j-api=, =slf4j-ext=.
   #+begin_src xml
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-ext</artifactId>
      <version>${slf4j.version}</version>
      <scope>test</scope>
    </dependency>
   #+end_src
*** Upgrade =logback-core= only
	[INFO] Running com.github.dockerjava.netty.NettyDockerCmdExecFactoryConfigTest
	Failed to instantiate SLF4J LoggerFactory.
	Could not intialize =com.github.dockerjava.core.command.VersionCmdImpl=.

	Refer: [[file:../db/com.github.docker-java/docker-java/ffcd6522da105454391fdf865e1ef9ccd0e4b26c/one/logback-core/runtest-nocsi.log][runtest.log]]

**** Root cause
***** Exception in client
	 In test, =client.versionCmd().exec()=, the call to =versionCmd()= is dispatched to:
	 #+begin_src java
// com.github.dockerjava.core.DockerClientImpl
public VersionCmd versionCmd() {
	return new VersionCmdImpl(getDockerCmdExecFactory().createVersionCmdExec());
}
	 #+end_src
	 which instantiate a new =VersionCmdImpl= object.
	 #+begin_src java
public class VersionCmdImpl extends AbstrDockerCmd<VersionCmd, Version> implements VersionCmd {

	public VersionCmdImpl(VersionCmd.Exec exec) {
		super(exec);
	}
}
	 #+end_src
	 The base class =AbstrDockerCmd= has a =Logger= member, but the initialization of
	 =org.slf4j.LoggerFactory= failed.
	 #+begin_src java
private static final Logger LOGGER = LoggerFactory.getLogger(AbstrDockerCmd.class);
	 #+end_src

	 #+begin_src
Caused by: java.lang.IllegalStateException: org.slf4j.LoggerFactory in failed state. Original exception was thrown EARLIER. See also http://www.slf4j.org/codes.html#unsuccessfulInit
		at org.slf4j.LoggerFactory.getILoggerFactory(LoggerFactory.java:422)
		at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:357)
		at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:383)
		at com.github.dockerjava.core.command.AbstrDockerCmd.<clinit>(AbstrDockerCmd.java:22)
		... 36 more
	 #+end_src
***** root cause in library
      Then the reason why =LoggerFactory= initializes unsuccessfully lies in the mismatch versions
      of =logback-core= and =slf4j-api=.

      Upgrading introduces a newer version of =logback-core=, but =slf4j-api= is not upgraded since
      it is only depended by =logback-classic=.
#+begin_src
java.lang.NoClassDefFoundError: ch/qos/logback/core/joran/action/AbstractEventEvaluatorAction
    ...
    at ch.qos.logback.classic.util.ContextInitializer.configureByResource(ContextInitializer.java:73)
    at ch.qos.logback.classic.util.ContextInitializer.autoConfig(ContextInitializer.java:150)  <-- logback-classic
    at org.slf4j.impl.StaticLoggerBinder.init(StaticLoggerBinder.java:84)  <-- slf4j-api
    at org.slf4j.impl.StaticLoggerBinder.<clinit>(StaticLoggerBinder.java:55)
    at org.slf4j.LoggerFactory.bind(LoggerFactory.java:150)
    at org.slf4j.LoggerFactory.performInitialization(LoggerFactory.java:124)
    at org.slf4j.LoggerFactory.getILoggerFactory(LoggerFactory.java:412)   <-- slf4j-api
    ...
#+end_src

#+begin_src
  +---------------------------+
  |                           |
  |   ----------------       ------------------------
  |  |   org.slf4j    |     | com.github.docker-java |
  |  | jcl-over-slf4j |     |      docker-java       |
  |  |     1.7.25     | <-- |         3.1.5          | -+
  |   ----------------       ------------------------   |
  |    :                      |                         |
  |    :                      |                         |
  |    v                      v                         |
  |   ----------------       ------------------------   |
  |  |   org.slf4j    |     |     ch.qos.logback     |  |
  |  |   slf4j-api    |     |    logback-classic     |  |
  |  |     1.7.25     |     |         1.2.3          |  |
  +> | (compile/test) | <.. |         (test)         |  |
      ----------------       ------------------------   |
                              :                         |
                              :                         |
                              v                         |
                             ------------------------   |
                            |     ch.qos.logback     |  |
                            |      logback-core      |  |
                            |         1.2.3          |  |
                            |         (test)         | <+
                             ------------------------
#+end_src
** DONE objectify > appengine
*** Info
   | Client    | Library                                    | V_{old} | V_{new} | Type      |
   |-----------+--------------------------------------------+---------+---------+-----------|
   |           | com.google.appengine:appengine-api-1.0-sdk |         |         |           |
   | objectify | com.google.appengine:appengine-api-labs    |  1.9.24 |  1.9.77 | Fail only |
   |           | com.google.appengine:appengine-api-stubs   |         |         |           |
   |           | com.google.appengine:appengine-testing     |         |         |           |
*Conclusion*: thrown by library methods

*Others*: although =api-labs= belongs to the same group and references the same version property,
updating it solely does not trigger test failure and it is not required to be updated to fix issues
brought by other updates.

*** Status [2/2]
	+ [X] Succeed with old versions
	+ [X] Failed after upgrading
	  - [X] Upgrade all 4 dependencies to 1.9.77: not fail
	  - [X] Upgrade =1.0-sdk= only: fail, in library
	  - [X] Upgrade =api-labs= only: succeed
	  - [X] Upgrade =api-stubs= only: fail, in library
	  - [X] Upgrade =testing= only: fail, in library
	  - [X] Upgrade only 3 (except =api-labs=) dependencies to 1.9.77: not fail

** TODO flowable-engine > jackson-databind
*** Info
   | Client          | Library                                     | V_{old} | V_{new} | Type        |
   |-----------------+---------------------------------------------+---------+---------+-------------|
   | flowable-engine | com.fasterxml.jackson.core:jackson-databind |   2.9.8 |  2.10.1 | Fail, Error |

*** Status [0/1]
	+ [-] Succeed with old versions: failed
	  - [ ] failed, debug with idea: running test would add option =--add-modules=, which is not
            supported in java-8
	+ [ ] Failed after upgrading
	  - [ ] Upgrade all ? dependencies to 2.10.1
** VERIFY java-driver > org.slf4j:slf4j-api
*** Info
   client: java-driver, lib: org.slf4j:slf4j-api,
   old version: 1.7.26, new version: 2.0.0-alpha1,
   type: Error Only
*** Involved packages
	+ slf4j-api
	+ logback-classic

*** Change in binding mechanism
	slf4j-api, starts from 1.8.x
	+ old way: static binding
	+ new way: service loader

*** Test failures
	This is a multiple module project, failures are in =java.driver.core=.
	  #+begin_src
java.lang.NullPointerException at com.datastax.oss.driver.internal.core.adminrequest.AdminRequestHandler.onWriteComplete(AdminRequestHandler.java:132)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:500)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:474)
	at io.netty.util.concurrent.DefaultPromise.access$000(DefaultPromise.java:32)
	at io.netty.util.concurrent.DefaultPromise$1.run(DefaultPromise.java:424)
	at io.netty.util.concurrent.GlobalEventExecutor$TaskRunner.run(GlobalEventExecutor.java:250)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)
	  #+end_src

	  #+begin_src java
Tests run: 10, Failures: 0, Errors: 10, Skipped: 0, Time elapsed: 0.023 sec <<< FAILURE! - in com.datastax.oss.driver.internal.core.time.AtomicTimestampGeneratorTest
should_use_clock_if_it_keeps_increasing(com.datastax.oss.driver.internal.core.time.AtomicTimestampGeneratorTest)  Time elapsed: 0.017 sec  <<< ERROR!
java.lang.ClassCastException: org.slf4j.helpers.NOPLogger cannot be cast to ch.qos.logback.classic.Logger at com.datastax.oss.driver.internal.core.time.AtomicTimestampGeneratorTest.setup(AtomicTimestampGeneratorTest.java:30)
	  #+end_src
** TODO zt-exec > slf4j-api
*** Info
   client: zt-exec, lib: org.slf4j:slf4j-api,
   old version: 1.7.2, new version: 2.0.0-alpha1,
   type: Fail Only

*** Cause of assertion failures
	#+begin_src java
// src/test/java/org/zeroturnaround/exec/test/ProcessExecutorLoggerTest.java
@Test
public void testShortName() throws Exception {
  String shortName = "MyLogger";
  String fullName = getClass().getName() + "." + shortName;
  testSlf4jLoggerName(fullName, Slf4jStream.of(shortName));
}
	#+end_src
	The client test code compares =fullname=, which would be
	=org.zeroturnaround.exec.test.ProcessExecutorLoggerTest.MyLogger= and results of
	=Slf4jStream.of("MyLogger")=.

	#+begin_src java
public static Slf4jStream of(String name) {
  return of(LoggerFactory.getLogger(CallerLoggerUtil.getName(name, 1)));
}
	#+end_src
	The client method =Slf4jStream.of(String)= would call =Slf4jStream.of(Logger)=, which would init
	a new =Slf4jStream= object using the =Logger= object returned by
	=slf4j.LoggerFactory.getLogger(String)=.

	=CallerLoggerUtil.getName(String, int)= is a client method which just prefix shortname with the
	class name.

	In this case, due to the slf4j-1.8.0 *static binding* to *service loader* change, on =Logger=
	object, =getLogger(Stirng)= fallback to the =NOPLogger=, leading to the
	=org.junit.ComparisonFailure=.

*** No dataflow between libraries (in client) in this case
	=logback-classic= only appears in dependency, not in source code.
	Before 1.8.0, =slf4j-api= would bind to =logback-classic= found on classpath.

** TODO zt-exec > logback-classic
*** Info
   client: zt-exec, lib: ch.qos.logback:logback-classic,
   old version: 1.1.2, new version: 1.3.0-alpha5,
   type: Fail Only
*** Cause
	Although =slf4j-api= is still on version 1.7.2 and static binding is used, it still falls back to
	=NOPLogger= since "failed to load class =org.slf4j.impl.StaticLoggerBinder=".

	#+begin_quote
*Failed to load class org.slf4j.impl.StaticLoggerBinder*

This warning message is reported when the org.slf4j.impl.StaticLoggerBinder class could not be
loaded into memory. This happens when no appropriate SLF4J binding could be found on the class path.
Placing one (and only one) of slf4j-nop.jar slf4j-simple.jar, slf4j-log4j12.jar, slf4j-jdk14.jar or
logback-classic.jar on the class path should solve the problem.
	#+end_quote
	There is a dependency conflict:\\
	=logback-classic:1.3.0-alpha5= requires =slf4j-api:2.0.0-alpha1= but we still have 1.7.2.


** chaos-monkey-spring-boot > org.slf4j:jcl-over-slf4j
*** Info
   client: chaos-monkey-spring-boot, lib: org.slf4j:jcl-over-slf4j,
   old version: 1.7.25, new version: 2.0.0-alpha1,
   type: Error Only
   
*** Status
	Cannot find the targeted dataflow. Refer to the [[file:bug-induced-upgrade.org::*Cases Inspection][notes]].
	

** quickfixj
*** Info
   client: quickfixj, lib: org.slf4j:slf4j-api, 
   old version: 1.7.25, new version: 2.0.0-alpha1, type: Fail Only
  
   slf4j-api: cross version 1.8.0, known issue: change in provider binding mechanism

   
*** Status [1/1]
	+ [X] Verify that upgrade cause test failure
	  - see error logs below
    + [ ] Root cause
#+begin_src 
[ERROR] Failures:
[ERROR]   SLF4JLogTest.testLog:63->assertMessageLogged:191 expected:<1> but was:<0>
[ERROR]   SLF4JLogTest.testLogHeartbeatFiltering:114->assertMessageLogged:191 expected:<1> but was:<0>
[ERROR]   SSLCertificateTest.shouldCreateFixSessionWithoutAuthenticationWhenTrustStoresAreMissing:336 Session is not logged on
[ERROR]   SSLCertificateTest.shouldCreateFixSessionWithoutAuthenticationWhenUsingDefaultKeystores:366 Session is not logged on
[ERROR]   SSLCertificateTest.shouldCreateFixSessionWithoutAuthenticationWhenUsingEmptyServerKeyStoreWithAnonymousCipher:306 Session is not logged on
[ERROR] Tests run: 1442, Failures: 5, Errors: 0, Skipped: 0
#+end_src


#+begin_src java
assertMessageLogged(sessionID, SLF4JLog.DEFAULT_EVENT_CATEGORY, loggedText); // L63

private void assertMessageLogged(SessionID sessionID, String categoryName, String message) {
	final TestHandler testHandler = getTestHandler(categoryName, sessionID);
	assertEquals(1, testHandler.records.size()); // L191
	...
}
#+end_src

Failures above were caused by the =SQLException= below.

#+begin_src 
JdbcLog cannot log SQLException due to recursive log errors!
java.sql.SQLException: Table not found in statement [INSERT INTO event_log (time, beginstring,sendercompid,targetcompid,session_qualifier, text) VALUES (?,?,?,?,?,?)]
        at org.hsqldb.jdbc.Util.throwError(Unknown Source)
        at org.hsqldb.jdbc.jdbcPreparedStatement.<init>(Unknown Source)
        at org.hsqldb.jdbc.jdbcConnection.prepareStatement(Unknown Source)
        at sun.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.logicalcobwebs.proxool.WrappedConnection.invoke(WrappedConnection.java:162)
        at org.logicalcobwebs.proxool.WrappedConnection.intercept(WrappedConnection.java:87)
        at $java.lang.AutoCloseable$$EnhancerByProxool$$8546a698.prepareStatement(<generated>)
        at quickfix.JdbcLog.insert(JdbcLog.java:162)
		at quickfix.JdbcLog.onEvent(JdbcLog.java:131)
        at quickfix.Session.<init>(Session.java:513)
        at quickfix.DefaultSessionFactory.create(DefaultSessionFactory.java:209)
        at quickfix.SessionTest.testSessionRegisteredCorrectly(SessionTest.java:1744)
#+end_src


#+begin_src java
public void testSessionRegisteredCorrectly() throws Exception {
	...
	try (Session session = factory.create(sessionID, settings)) { // SessionTest.java:1744
		assertNotNull(session);
	}
	...
}

Session(...) { // Session.<init>
	...
	getLog().onEvent("Session " + sessionID + " schedule is " + sessionSchedule); // Session.java:513
	...
}

public void onEvent(String value) {
	insert(eventTableName, value); // JdbcLog.java:131
}

private void insert(String tableName, String value) {
    ...
	if (recursiveException != null) {
		System.err.println("JdbcLog cannot log SQLException due to recursive log errors!");
		recursiveException.printStackTrace();
		recursiveException = null;
		return;
	}
	...
	insert = connection.prepareStatement(getInsertItemSql(tableName));// JdbcLog.java:162
    ...
}
#+end_src
