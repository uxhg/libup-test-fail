#+TITLE: Bug-induced Upgrade
#+DATE:
#+AUTHOR: wuxh
#+OPTIONS: timestamp:nil
#+OPTIONS: ^:{}
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org_modify.css"/>



* Overview
** Goal
   There exist some library upgrade which would break client. Among them lots of cases are due to
   the co-evolution of libraries. We aim to find those bug-induced upgrade.

   Given a client (and its dependencies), generate a patch on POM to upgrade a certain library / certain libraries,
   so that some client tests (used to pass) would fail with upgraded dependencies.

** Na√Øve approach / groundtruth
   Upgrade each library and run tests.
   Our approach should be more efficient than this brute-force approach.
** Current idea
   To reduce the cycles of upgrade-runtest,
   cluster / partition all dependencies (maybe include transitive) as weakly-connected (directed) sub-graphs,
   so that multiple combinations can be pruned after one upgrade-runtest cycle.

** Algorithm
   #+begin_src C
// INPUT: c - a client
D_a = DependencyGraph(c) // pom
D_b = RunAnalysis() // codeQL query
G = ConstructGraph(D_a, D_b)
G_0, ..., G_n = Partition(G) // a set of sub-graphs
While (any of G_i is not empty) do
    For i = 0 to n do
	L_i = Prioritise(G_i)
    done
    DoUpgrade([L_i for i = 0 to n])
    T = SelectTest()
    suc, trace = RunTest(T)
    if suc is false then
	if Verify(trace) is true then
	    return
    else
	Prune(G_0, ..., G_n)
done
   #+end_src

** How to reduce search space

** Client issues
* Partition strategy / ideas
** Mine references used in POMs
   Those library whose versions are configured use the same reference should have strong
   connection.
** Static analysis on client
   Find highly-related libraries, based on their mutual presence and/or data dependency in a
   client method.

* Interaction Pattern (where conflicts happen)
+ JAR ?
+ POM:
+ data: e.g. jacoco-core, jacoco-report
+ client usage
* Future Plan
+ Upgrade pairs to find conflicts caused by two (or more) dependencies

  
* Maven Dependency Plugin
** Verbose option
   =-Dverbose= option was removed since =maven-dependency-plugin:3.0= for Maven 3 compatibility.

   
* Dataflow Analysis with CodeQL
