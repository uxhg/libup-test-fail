#ifndef def_basic_dep_dl
#define def_basic_dep_dl

#include "types.dl"


.decl Method(fqn: MethodFQN, name: String)
.input Method(filename="IsMethod.facts")

.decl MethodAccess(caller: MethodFQN, callee: MethodFQN)
.input MethodAccess(filename="Call.facts")

.decl Clazz(fqn: ClassFQN, isAbstract: Boolean, superClass: ClassFQN, isNested: Boolean, outer: ClassFQN, isTestClass: Boolean)
.input Clazz(filename="IsClass.facts")

.decl Containment(er: FQN, ee: FQN)
.input Containment(filename="Contain.facts")

.decl Ref(er: FQN, ee: FQN)
.input Ref(filename="Reference.facts")

.decl IsTestClass(clazz: ClassFQN)
.input IsTestClass(filename="TestClass.facts")

.decl IsAbstractClass(clazz: ClassFQN)
.input IsAbstractClass(filename="AbstractClass.facts")

.decl Inherit(sub: ClassFQN, super: ClassFQN)
.input Inherit(filename="Inherit.facts")


#endif
